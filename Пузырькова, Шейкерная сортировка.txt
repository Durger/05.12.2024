template <class T> // Определение шаблона функции, позволяющего использовать любой тип данных T
void shakerSort(T a[], long size) { // Объявление функции shakerSort, принимающей массив a и его размер size
    long j, k = size - 1; // Объявление переменных j и k. k инициализируется как последний индекс массива
    long lb = 1, ub = size - 1; // Инициализация границ неотсортированной части массива: lb - нижняя граница, ub - верхняя граница
    T x; // Объявление временной переменной x типа T для обмена значениями

    do { // Начало цикла do-while, который будет выполняться до тех пор, пока lb меньше ub
        // Проход снизу вверх 
        for (j = ub; j > 0; j--) { // Внутренний цикл для сравнения элементов с конца массива до начала
            if (a[j - 1] > a[j]) { // Если текущий элемент больше следующего элемента
                x = a[j - 1]; // Сохраняем больший элемент во временной переменной x
                a[j - 1] = a[j]; // Меняем местами элементы: текущий становится меньшим
                a[j] = x; // И присваиваем большему элементу значение меньшего
                k = j; // Обновляем k как индекс последнего произведенного обмена
            }
        }
        lb = k + 1; // Обновляем нижнюю границу lb на один больше индекса последнего обмена

        // Проход сверху вниз 
        for (j = 1; j <= ub; j++) { // Внутренний цикл для сравнения элементов с начала массива до конца
            if (a[j - 1] > a[j]) { // Если текущий элемент больше следующего элемента
                x = a[j - 1]; // Сохраняем больший элемент во временной переменной x
                a[j - 1] = a[j]; // Меняем местами элементы: текущий становится меньшим
                a[j] = x; // И присваиваем большему элементу значение меньшего
                k = j; // Обновляем k как индекс последнего произведенного обмена
            }
        }
        ub = k - 1; // Обновляем верхнюю границу ub на один меньше индекса последнего обмена
    } while (lb < ub); // Продолжаем выполнение цикла, пока нижняя граница меньше верхней границы
}